\relax 
\providecommand\babel@aux[2]{}
\@nameuse{bbl@beforestart}
\citation{mcclellan_lab_2016}
\citation{mcclellan_dsp_2016}
\citation{raybaut_spyder_2024}
\citation{noauthor_anaconda_2024}
\citation{project_jupyter_jupyter_nodate}
\babel@aux{UKenglish}{}
\@writefile{toc}{\contentsline {section}{\numberline {1}Introduction}{1}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.1}Aim}{1}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.2}Software Tools: Python with Spyder and Jupyter Lab}{1}{}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {2}Theory}{1}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1}Sinusoidial Signals and Phasors}{1}{}\protected@file@percent }
\@writefile{lot}{\contentsline {table}{\numberline {1}{\ignorespaces Recommended format for importing the Python libraries used in this exercise. \emph  {Numpy} is used to manipulate signals and time-vectors as arrays. \emph  {Matplotlib}'s \emph  {pyplot} is used to plot the results in graphs. The complex math library \emph  {cmath} is included to have more direct access the mathematical constants and functions, in this case $\pi $ and the complex exponential \texttt  {exp}. This is strictly not necessary as these are also included in Numpy. Note that the \emph  {cmath} functions can handle scalars only, not arrays. }}{2}{}\protected@file@percent }
\newlabel{tab:import-libraries}{{1}{2}}
\@writefile{lol}{\contentsline {lstlisting}{]}{2}{}\protected@file@percent }
\@writefile{lot}{\contentsline {table}{\numberline {2}{\ignorespaces Overview of basic complex number operations in Python. Detailed explanations and more functions are found in the documentation for Numpy. The function calls in this table are prefixed by \texttt  {np} in accordance with the \emph  {Numpy} was imported, see Table~\ref {tab:import-libraries}. }}{2}{}\protected@file@percent }
\newlabel{tab:complex-overview}{{2}{2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2}Complex Numbers in Python with Numpy}{2}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {2.3}Adding Sinusiods using Complex Exponentials}{2}{}\protected@file@percent }
\newlabel{eq:phasorsum}{{3}{3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.4}Harmonics and Periodic signals}{3}{}\protected@file@percent }
\newlabel{eq:harmonicsum}{{7}{3}}
\@writefile{toc}{\contentsline {section}{\numberline {3}Programming Tips}{3}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1}Complex Numbers and Phasors}{3}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2}Vectorization}{3}{}\protected@file@percent }
\@writefile{lot}{\contentsline {table}{\numberline {3}{\ignorespaces Functions to show complex numbers as phasors in the complex plane, called Argand-diagrams. The functions are found in the file \emph  {zplot.py} included for this lab. }}{4}{}\protected@file@percent }
\newlabel{tab:zplot}{{3}{4}}
\@writefile{toc}{\contentsline {section}{\numberline {4}Training Exercises}{4}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.1}Complex Numbers}{4}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.2}Python Function to Generate a Sinusoid Signal }{5}{}\protected@file@percent }
\@writefile{lot}{\contentsline {table}{\numberline {4}{\ignorespaces Skeleton for a function to generate a cosine signal from amplitude, frequency, and phase. The first lines are the recommended function call and documentation text. The last line specifies that the signal $x$ and time vector $t$ are to be returned. }}{5}{}\protected@file@percent }
\newlabel{tab:make-cos}{{4}{5}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.3}Python Function to Generate a Sum of Sinosoid Signals}{5}{}\protected@file@percent }
\citation{mcclellan_lab_2016}
\@writefile{toc}{\contentsline {section}{\numberline {5}Lab Exercise: Direction finding}{6}{}\protected@file@percent }
\@writefile{lot}{\contentsline {table}{\numberline {5}{\ignorespaces Skeleton for a function to generate signal by summing cosine-functions with different complex amplitudes and frequencies. The first lines are the recommended function call and documentation text. The last line specifies that the signal \emph  {x} and time vector \emph  {t} are to be returned. Note that the start time \emph  {t\_start} is specified as an optional argument with default value \num {0}. }}{7}{}\protected@file@percent }
\newlabel{tab:summed_cos}{{5}{7}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.1}Direction Finding with Microphones}{7}{}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces Direction finding using two microphones. A vehicle at position $x_v$ travels along the $x$-axis while emitting a sound with frequency $f_s$=\qty {400}{Hz}. The sound is picked up by two microphones M1 and M2 positioned with spacing $d$=\qty {0.40}{m}. The difference in propagation distance $\Delta s= s_1-s_2$ causes a phase-shift between the signals received by the two microphones. This phase shift can be used to estimate the direction to the vehicle emitting the sound, specified by the angle $\theta $. }}{8}{}\protected@file@percent }
\newlabel{fig:overview}{{1}{8}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces Zoomed-in version of Fig.~\ref {fig:overview} to show the difference in propagation distance $\Delta s$ from the sound source to the two microphones. When the distance to the source is very long compared to the distance between the microphones,$s_1, s_2 \ll d$, the paths can be approximated as parallel and the difference in distance is $\Delta s = s_1 - s_2 \approx d sin \theta $ where $\theta $ is the direction to the source. }}{8}{}\protected@file@percent }
\newlabel{fig:far_field_zoom}{{2}{8}}
\bibstyle{ieeetr}
\bibdata{../defs/tse2280.bib}
\bibcite{mcclellan_lab_2016}{1}
\bibcite{mcclellan_dsp_2016}{2}
\bibcite{raybaut_spyder_2024}{3}
\bibcite{noauthor_anaconda_2024}{4}
\bibcite{project_jupyter_jupyter_nodate}{5}
\newlabel{LastPage}{{}{10}}
\xdef\lastpage@lastpage{10}
\gdef\lastpage@lastpageHy{}
\gdef \@abspage@last{10}
